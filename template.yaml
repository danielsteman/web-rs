AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SAM template for Rust binary
Parameters:
  DatabaseUrl:
    Type: String
Resources:
  WebRsApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: WebRsApi
      StageName: Prod
      BinaryMediaTypes:
        - "image/x-icon"
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"

  WebRsFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
      BuildProperties: function_a
    Properties:
      FunctionName: WebRsFunction
      CodeUri: ./target/lambda/webrs/
      Handler: bootstrap
      Runtime: provided.al2023
      FunctionUrlConfig:
        AuthType: NONE
      Tracing: Active
      Environment:
        Variables:
          DATABASE_URL:
            Ref: DatabaseUrl
      Events:
        RootApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref WebRsApi
            Path: /
            Method: ANY
        AnyApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref WebRsApi
            Path: /{proxy+}
            Method: ANY

  WebRsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/WebRsLogs

  WebRsCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: danielsteman.com
      RegionalCertificateArn: arn:aws:acm:eu-central-1:730335219622:certificate/26ab8949-9465-4abd-af91-1e58ceb7c9c9
      EndpointConfiguration:
        Types:
          - REGIONAL

  WebRsBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref WebRsCustomDomain
      RestApiId: !Ref WebRsApi
      Stage: Prod
      BasePath: ""

  WebRsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: danielsteman.com
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  WebRsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebRsBucket
      PolicyDocument:
        Statement:
          - Effect: "Allow"
            Action: "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${WebRsBucket}/*"
            Principal:
              AWS: !GetAtt OriginAccessIdentity.S3CanonicalUserId

  OriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName

  WebRsCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt WebRsBucket.DomainName
            Id: WebRsS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${OriginAccessIdentity}"
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: WebRsS3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          MinTTL: 0
          DefaultTTL: 86400
          MaxTTL: 31536000
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:eu-central-1:730335219622:certificate/26ab8949-9465-4abd-af91-1e58ceb7c9c9
          SslSupportMethod: sni-only
        HttpVersion: http2
        PriceClass: PriceClass_100

Outputs:
  WebRsFunction:
    Description: Lambda Function ARN
    Value: !GetAtt WebRsFunction.Arn
  CloudFrontDistributionDomainName:
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt WebRsCloudFrontDistribution.DomainName
